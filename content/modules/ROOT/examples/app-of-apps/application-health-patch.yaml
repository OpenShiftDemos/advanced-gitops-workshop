  spec:
    resourceHealthChecks:
    - kind: PersistentVolumeClaim
      check: |
        hs = {}
        if (obj.status ~= nil and obj.status.phase ~= nil) then
            if (obj.status.phase == "Pending" or obj.status.phase == "Bound") then
                hs.status = "Healthy"
                hs.message = obj.status.phase
                return hs
            elseif obj.status.phase == "Lost" then
                hs.status = "Degraded"
                hs.message = obj.status.phase
                return hs
            end
        end
        hs.status = "Unknown"
        hs.message = "Waiting for PVC status"
        return hs
    - kind: Application
      group: argoproj.io
      check: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          local status = obj.status
          if status.conditions ~= nil then
            for i, condition in ipairs(status.conditions) do
              if condition.type ~= nil and string.match(condition.type, '.*Error$') then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
            end
          end
          if status.health ~= nil then
            local health = status.health

            if health.status ~= "Healthy" then
              hs.status = health.status
              if health.message ~= nil then
                hs.message = health.message
              end
              return hs
            end

            if status.sync ~= nil then
              local sync = status.sync

              if sync.status ~= "Synced" then
                hs.status = "Progressing"
                return hs
              end

              if sync.comparedTo ~= nil and sync.comparedTo.source ~= nil and sync.comparedTo.source.targetRevision ~= nil and obj.spec ~= nil and obj.spec.source ~= nil then
                if sync.comparedTo.source.targetRevision ~= obj.spec.source.targetRevision then
                  hs.status = "Progressing"
                  hs.message = "Sync status is for old targetRevision, waiting for update..."
                end
              end

              if health.status == "Healthy" and sync.status == "Synced" then
                hs.status = "Healthy"
                return hs
              end
            end
          end
        end
        return hs